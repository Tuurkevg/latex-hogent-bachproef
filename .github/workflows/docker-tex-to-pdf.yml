name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Stap 1: Checkout de code uit de repository
    - uses: actions/checkout@v4

    # Stap 2: Build de Docker image
    - name: Build the Docker image
      run: docker build -t bpimg -f docker/Dockerfile .

    # Stap 3: Build de thesis bestanden
    - name: Build the proposal
      run: docker run --rm -v "$PWD":/bp bpimg sh /bp/docker/render_thesis.sh voorstel

    - name: Build the thesis
      run: docker run --rm -v "$PWD":/bp bpimg sh /bp/docker/render_thesis.sh bachproef

    - name: Build the poster
      run: docker run --rm -v "$PWD":/bp bpimg sh /bp/docker/render_thesis.sh poster
    # stap vier maak artifact (origineel)
    - uses: actions/upload-artifact@v4
      name: Upload artifacts
      with:
        name: output
        path: |
          output/*.pdf
          output/*.log
        if-no-files-found: error        
    # Stap 5: Maak de GitHub release aan
    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Haal de laatste versie tag op
        VERSION=$(git describe --tags --abbrev=0)

        # Verhoog de patch versie door deze te splitsen
        VERSION_PARTS=(${VERSION//./ })
        PATCH=${VERSION_PARTS[2]}
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH"

        # Maak de release met de nieuwe versie tag
        gh release create "v$NEW_VERSION" output/*.pdf --title "Bachelorproef Release $NEW_VERSION" --notes "Deze release bevat de Bachelorproef outputbestanden."
